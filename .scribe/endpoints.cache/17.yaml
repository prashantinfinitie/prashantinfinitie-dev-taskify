## Autogenerated by Scribe. DO NOT MODIFY.

name: 'Tag Management'
description: ''
endpoints:
  -
    httpMethods:
      - GET
    uri: 'api/tags/{id?}'
    metadata:
      groupName: 'Tag Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'List or search tags.'
      description: 'This endpoint retrieves a list of tags based on various filters. The user must be authenticated to perform this action. The request allows searching and sorting by different parameters.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Accept: application/json
      workspace_id: 1
    urlParameters:
      id:
        name: id
        description: 'optional The ID of the tag to retrieve.'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters:
      search:
        name: search
        description: 'optional The search term to filter tags by title or id.'
        required: false
        example: Urgent
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
      sort:
        name: sort
        description: 'optional The field to sort by. Defaults to "id". Sortable fields include: id, title, created_at, and updated_at.'
        required: false
        example: title
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
      order:
        name: order
        description: 'optional The sort order, either "ASC" or "DESC". Defaults to "DESC".'
        required: false
        example: ASC
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
      limit:
        name: limit
        description: 'optional The number of tags per page for pagination.'
        required: false
        example: 10
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
      offset:
        name: offset
        description: 'optional The offset for pagination, indicating the starting point of results.'
        required: false
        example: 0
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanQueryParameters:
      search: Urgent
      sort: title
      order: ASC
      limit: 10
      offset: 0
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "error": false,
            "message": "Tags retrieved successfully",
            "total": 1,
            "data": [
              {
                "id": 1,
                "title": "Urgent",
                "color": "primary",
                "created_at": "20-07-2024 17:50:09",
                "updated_at": "21-07-2024 19:08:16"
              }
            ]
          }
        headers: []
        description: ''
        custom: []
      -
        status: 200
        content: |-
          {
            "error": true,
            "message": "Tag not found",
            "total": 0,
            "data": []
          }
        headers: []
        description: ''
        custom: []
      -
        status: 200
        content: |-
          {
            "error": true,
            "message": "Tags not found",
            "total": 0,
            "data": []
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer e685PvZ3Eah164dakVfcbgD'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/tags/store
    metadata:
      groupName: 'Tag Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Create a new tag.'
      description: 'This endpoint creates a new todo item with the specified title, color. The user must be authenticated to perform this action.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Accept: application/json
      workspace_id: 1
      Content-Type: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      title:
        name: title
        description: 'The title of the tag.'
        required: true
        example: 'Finish report'
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
      color:
        name: color
        description: 'The priority of the tag. Must be one of "primary", "secondary", or "warning".'
        required: true
        example: secondary
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanBodyParameters:
      title: 'Finish report'
      color: secondary
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "error": false,
          "message": "Tag created successfully.",
          "id": 36,
          "data": {
            "id": 36,
            "title": "test",
            "color": "secondary",
            "created_at": "07-08-2024 16:30:09",
            "updated_at": "07-08-2024 16:30:09"
          }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
            "error": true,
            "message": "Validation errors occurred",
            "errors": {
              "title": [
                "The title field is required."
              ],
              "color": [
                "The color must be one of the following: primary, secondary, warning, info, dark, success, danger."
              ]
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
            "error": true,
            "message": "An error occurred while creating the todo."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer fvDVcEk538b6Zag46Pe1adh'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/tags/update
    metadata:
      groupName: 'Tag Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Update an existing tag.'
      description: 'This endpoint updates an existing tag item with the specified title, color. The user must be authenticated to perform this action.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Accept: application/json
      workspace_id: 1
      Content-Type: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      id:
        name: id
        description: 'The ID of the todo to be updated.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
      title:
        name: title
        description: 'The new title of the todo.'
        required: true
        example: 'Finish report'
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
      color:
        name: color
        description: 'The new priority of the todo. Must be one of "primary", "secondary", "warning", "dark", "info","danger" or "success".'
        required: true
        example: secondary
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanBodyParameters:
      id: 1
      title: 'Finish report'
      color: secondary
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "error": false,
          "message": "Tag updated successfully.",
          "id": "36",
          "data": {
            "id": 36,
            "title": "test",
            "color": "secondary",
            "created_at": "07-08-2024 16:30:09",
            "updated_at": "07-08-2024 16:30:09"
          }
          }

          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
            "error": true,
            "message": "Validation errors occurred",
            "errors": {
              "id": [
                "The id field is required."
              ],
              "title": [
                "The title field is required."
              ],
              "color": [
                "The color must be one of the following: secondary, primary, info, warning, dark, danger."
              ]
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
            "error": true,
            "message": "An error occurred while updating the tag."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 3ce8v6PZbhE6akV41Dgd5fa'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/tags/destroy/{id}'
    metadata:
      groupName: 'Tag Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Remove the specified tag.'
      description: 'This endpoint deletes a tag item based on the provided ID. The user must be authenticated to perform this action.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Accept: application/json
      workspace_id: 1
    urlParameters:
      id:
        name: id
        description: 'The ID of the todo to be deleted.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "error": false,
            "message": "Tag deleted successfully.",
            "id": 1,
            "title": "Tag Title"
            "data": []
          }
        headers: []
        description: ''
        custom: []
      -
        status: 200
        content: |-
          {
            "error": true,
            "message": "Tag not found.",
            "data": []
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
            "error": true,
            "message": "An error occurred while deleting the tag."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 1fcdaVbkZ5Dvh6g3ae46P8E'
    controller: null
    method: null
    route: null
    custom: []
