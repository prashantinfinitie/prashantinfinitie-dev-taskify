## Autogenerated by Scribe. DO NOT MODIFY.

name: 'Role/Permission Management'
description: ''
endpoints:
  -
    httpMethods:
      - GET
    uri: 'api/roles/{id?}'
    metadata:
      groupName: 'Role/Permission Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'List or search roles.'
      description: 'This endpoint retrieves a list of roles based on various filters. The request allows filtering by search term and pagination parameters.'
      authenticated: false
      custom: []
    headers:
      Accept: application/json
      workspace_id: 1
    urlParameters:
      id:
        name: id
        description: 'optional The ID of the role to retrieve.'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters:
      search:
        name: search
        description: 'optional The search term to filter roles by id, name or guard_name.'
        required: false
        example: Admin
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
      sort:
        name: sort
        description: 'optional The field to sort by. all fields are sortable. Defaults to "created_at".'
        required: false
        example: name
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
      order:
        name: order
        description: 'optional The sort order, either "asc" or "desc". Defaults to "desc".'
        required: false
        example: asc
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
      limit:
        name: limit
        description: 'optional The number of roles per page for pagination. Defaults to 10.'
        required: false
        example: 10
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
      offset:
        name: offset
        description: 'optional The offset for pagination, indicating the starting point of results. Defaults to 0.'
        required: false
        example: 0
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanQueryParameters:
      search: Admin
      sort: name
      order: asc
      limit: 10
      offset: 0
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
              "error": false,
              "message": "Roles retrieved successfully.",
              "total": 1,
              "data": [
                  {
                      "id": 1,
                      "name": "Admin",
                      "guard_name": "web",
                      "created_at": "10-10-2023 17:50:09",
                      "updated_at": "23-07-2024 19:08:16"
                  }
              ]
          }
        headers: []
        description: ''
        custom: []
      -
        status: 200
        content: |-
          {
              "error": true,
              "message": "Role not found.",
              "total": 0,
              "data": []
          }
        headers: []
        description: ''
        custom: []
      -
        status: 200
        content: |-
          {
            "error": true,
            "message": "Roles not found",
            "total": 0,
            "data": []
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
              "error": true,
              "message": "An error occurred while retrieving the roles."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/permissions/{permission?}'
    metadata:
      groupName: 'Role/Permission Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Check user permissions.'
      description: |-
        This endpoint checks the module-wise permissions assigned to the authenticated user.
        If a specific permission is provided in the URL, it checks only that permission for the authenticated user.
        Otherwise, it returns all permissions for the authenticated user.
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Accept: application/json
      workspace_id: 1
    urlParameters:
      permission:
        name: permission
        description: 'optional The specific permission to check.'
        required: false
        example: |-
          "edit-post"

          Here is the module-wise permissions list.

          Activity Log:
          - manage_activity_log
          - delete_activity_log

          Allowances:
          - create_allowances
          - manage_allowances
          - edit_allowances
          - delete_allowances

          Clients:
          - create_clients
          - manage_clients
          - edit_clients
          - delete_clients

          Contract Types:
          - create_contract_types
          - manage_contract_types
          - edit_contract_types
          - delete_contract_types

          Contracts:
          - create_contracts
          - manage_contracts
          - edit_contracts
          - delete_contracts

          Deductions:
          - create_deductions
          - manage_deductions
          - edit_deductions
          - delete_deductions

          Estimates/Invoices:
          - create_estimates_invoices
          - manage_estimates_invoices
          - edit_estimates_invoices
          - delete_estimates_invoices

          Expense Types:
          - create_expense_types
          - manage_expense_types
          - edit_expense_types
          - delete_expense_types

          Expenses:
          - create_expenses
          - manage_expenses
          - edit_expenses
          - delete_expenses

          Items:
          - create_items
          - manage_items
          - edit_items
          - delete_items

          Media:
          - create_media
          - manage_media
          - delete_media

          Meetings:
          - create_meetings
          - manage_meetings
          - edit_meetings
          - delete_meetings

          Milestones:
          - create_milestones
          - manage_milestones
          - edit_milestones
          - delete_milestones

          Payment Methods:
          - create_payment_methods
          - manage_payment_methods
          - edit_payment_methods
          - delete_payment_methods

          Payments:
          - create_payments
          - manage_payments
          - edit_payments
          - delete_payments

          Payslips:
          - create_payslips
          - manage_payslips
          - edit_payslips
          - delete_payslips

          Priorities:
          - create_priorities
          - manage_priorities
          - edit_priorities
          - delete_priorities

          Projects:
          - create_projects
          - manage_projects
          - edit_projects
          - delete_projects

          Statuses:
          - create_statuses
          - manage_statuses
          - edit_statuses
          - delete_statuses

          System Notifications:
          - manage_system_notifications
          - delete_system_notifications

          Tags:
          - create_tags
          - manage_tags
          - edit_tags
          - delete_tags

          Tasks:
          - create_tasks
          - manage_tasks
          - edit_tasks
          - delete_tasks

          Taxes:
          - create_taxes
          - manage_taxes
          - edit_taxes
          - delete_taxes

          Timesheet:
          - create_timesheet
          - manage_timesheet
          - delete_timesheet

          Units:
          - create_units
          - manage_units
          - edit_units
          - delete_units

          Users:
          - create_users
          - manage_users
          - edit_users
          - delete_users

          Workspaces:
          - create_workspaces
          - manage_workspaces
          - edit_workspaces
          - delete_workspaces
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanUrlParameters:
      permission: |-
        "edit-post"

        Here is the module-wise permissions list.

        Activity Log:
        - manage_activity_log
        - delete_activity_log

        Allowances:
        - create_allowances
        - manage_allowances
        - edit_allowances
        - delete_allowances

        Clients:
        - create_clients
        - manage_clients
        - edit_clients
        - delete_clients

        Contract Types:
        - create_contract_types
        - manage_contract_types
        - edit_contract_types
        - delete_contract_types

        Contracts:
        - create_contracts
        - manage_contracts
        - edit_contracts
        - delete_contracts

        Deductions:
        - create_deductions
        - manage_deductions
        - edit_deductions
        - delete_deductions

        Estimates/Invoices:
        - create_estimates_invoices
        - manage_estimates_invoices
        - edit_estimates_invoices
        - delete_estimates_invoices

        Expense Types:
        - create_expense_types
        - manage_expense_types
        - edit_expense_types
        - delete_expense_types

        Expenses:
        - create_expenses
        - manage_expenses
        - edit_expenses
        - delete_expenses

        Items:
        - create_items
        - manage_items
        - edit_items
        - delete_items

        Media:
        - create_media
        - manage_media
        - delete_media

        Meetings:
        - create_meetings
        - manage_meetings
        - edit_meetings
        - delete_meetings

        Milestones:
        - create_milestones
        - manage_milestones
        - edit_milestones
        - delete_milestones

        Payment Methods:
        - create_payment_methods
        - manage_payment_methods
        - edit_payment_methods
        - delete_payment_methods

        Payments:
        - create_payments
        - manage_payments
        - edit_payments
        - delete_payments

        Payslips:
        - create_payslips
        - manage_payslips
        - edit_payslips
        - delete_payslips

        Priorities:
        - create_priorities
        - manage_priorities
        - edit_priorities
        - delete_priorities

        Projects:
        - create_projects
        - manage_projects
        - edit_projects
        - delete_projects

        Statuses:
        - create_statuses
        - manage_statuses
        - edit_statuses
        - delete_statuses

        System Notifications:
        - manage_system_notifications
        - delete_system_notifications

        Tags:
        - create_tags
        - manage_tags
        - edit_tags
        - delete_tags

        Tasks:
        - create_tasks
        - manage_tasks
        - edit_tasks
        - delete_tasks

        Taxes:
        - create_taxes
        - manage_taxes
        - edit_taxes
        - delete_taxes

        Timesheet:
        - create_timesheet
        - manage_timesheet
        - delete_timesheet

        Units:
        - create_units
        - manage_units
        - edit_units
        - delete_units

        Users:
        - create_users
        - manage_users
        - edit_users
        - delete_users

        Workspaces:
        - create_workspaces
        - manage_workspaces
        - edit_workspaces
        - delete_workspaces
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
              "error": false,
              "message": "Permissions check completed.",
              "data": {
                  "permissions": {
                      "create_projects": true,
                      "manage_projects": false,
                      ...
                  }
              }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
              "error": true,
              "message": "An error occurred while checking the permission."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer ck1E54afgZdV6Pbh863Deav'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/roles/store
    metadata:
      groupName: 'Role/Permission Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Create a new role.'
      description: 'This endpoint allows authenticated users to create a new role and assign permissions.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Accept: application/json
      workspace_id: 1
      Content-Type: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'The updated name of the role.'
        required: true
        example: '"Supervisor"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
      permissions:
        name: permissions
        description: 'optional A list of permission IDs to assign to the role.'
        required: false
        example:
          - 1
          - 2
          - 3
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanBodyParameters:
      name: '"Supervisor"'
      permissions:
        - 1
        - 2
        - 3
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "error": false,
            "message": "Role created successfully.",
            "role": {
              "id": 5,
              "name": "Supervisor",
              "permissions": ["edit_tasks", "assign_tasks"]
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 409
        content: |-
          {
            "error": true,
            "message": "A role `Manager` already exists."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
            "error": true,
            "message": "Validation failed.",
            "errors": {
              "name": ["The name field is required."]
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
            "error": true,
            "message": "An error occurred while creating the role."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer aghdDPc564b3a8Ef1vVekZ6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/roles/update/{id}'
    metadata:
      groupName: 'Role/Permission Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Update an existing role.'
      description: 'This endpoint allows authenticated users to update a role name and modify its permissions.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Accept: application/json
      workspace_id: 1
      Content-Type: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the role to update.'
        required: true
        example: 5
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanUrlParameters:
      id: 5
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'The updated name of the role.'
        required: true
        example: '"Supervisor"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
      permissions:
        name: permissions
        description: 'optional A list of permission IDs to assign to the role.'
        required: false
        example:
          - 1
          - 2
          - 3
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanBodyParameters:
      name: '"Supervisor"'
      permissions:
        - 1
        - 2
        - 3
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "error": false,
            "message": "Role updated successfully."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
            "error": true,
            "message": "Role not found."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 409
        content: |-
          {
            "error": true,
            "message": "A role `Manager` already exists."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
            "error": true,
            "message": "Validation failed.",
            "errors": {
              "name": ["The name field is required."]
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
            "error": true,
            "message": "An error occurred while updating the role."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer dcPb1Zhv8gea3DVE4ak665f'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/roles/destroy/{id}'
    metadata:
      groupName: 'Role/Permission Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete a role.'
      description: 'This endpoint allows authenticated users to delete a specific role.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Accept: application/json
      workspace_id: 1
    urlParameters:
      id:
        name: id
        description: 'The ID of the role to delete.'
        required: true
        example: 3
        type: integer
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanUrlParameters:
      id: 3
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "error": false,
            "message": "Role deleted successfully."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
            "error": true,
            "message": "Role not found."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 409
        content: |-
          {
            "error": true,
            "message": "Cannot delete this role because it is assigned to users."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
            "error": true,
            "message": "An error occurred while deleting the role."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer e6EfVv3b8Zcha54a61dkDPg'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/roles/get/{id?}'
    metadata:
      groupName: 'Role/Permission Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get a specific role with its permissions, grouped by category.'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Accept: application/json
      workspace_id: 1
    urlParameters:
      id:
        name: id
        description: 'The ID of the role to retrieve.'
        required: true
        example: 13
        type: integer
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanUrlParameters:
      id: 13
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "error": false,
            "role": {
              "id": 1,
              "name": "Admin",
              "permissions": {
                "projects": {
                  "create_projects": true,
                  "delete_projects": false
                },
                "tasks": {
                  "create_tasks": true
                }
              }
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer a6D1Z8badeg3PVk5cvEf46h'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/permissions-list
    metadata:
      groupName: 'Role/Permission Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'List all permissions.'
      description: 'This endpoint retrieves a list of all permissions.'
      authenticated: false
      custom: []
    headers:
      Accept: application/json
      workspace_id: 1
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "error": false,
            "message": "Permissions retrieved successfully.",
            "total": 5,
            "data": [
              {
                "id": 1,
                "name": "create_projects",
                "guard_name": "web",
                "created_at": "2023-10-10T17:50:09.000000Z",
                "updated_at": "2024-07-23T19:08:16.000000Z"
              },
              ...
            ]
          }
        headers: []
        description: ''
        custom: []
      -
        status: 200
        content: |-
          {
            "error": true,
            "message": "Permissions not found.",
            "total": 0,
            "data": []
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
            "error": true,
            "message": "An error occurred while retrieving the permissions."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
