## Autogenerated by Scribe. DO NOT MODIFY.

name: 'Task Media'
description: ''
endpoints:
  -
    httpMethods:
      - POST
    uri: api/tasks/upload-media
    metadata:
      groupName: 'Task Media'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Upload media files for a task.'
      description: 'This endpoint allows authenticated users to upload media files and associate them with a specific task.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Accept: application/json
      workspace_id: 1
      Content-Type: multipart/form-data
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      id:
        name: id
        description: 'The ID of the task where the media will be uploaded.'
        required: true
        example: 15
        type: integer
        enumValues: []
        exampleWasSpecified: false
        custom: []
      'media_files[]':
        name: 'media_files[]'
        description: 'An array of media files to upload. Max size is defined by system settings.'
        required: true
        example: null
        type: file
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanBodyParameters:
      id: 15
    fileParameters:
      'media_files[]': null
    responses:
      -
        status: 200
        content: |-
          {
            "error": false,
            "message": "File(s) uploaded successfully.",
            "id": [201, 202],
            "type": "media",
            "parent_type": "task",
            "parent_id": 15
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
            "error": true,
            "message": "Validation errors occurred.",
            "errors": {
              "id": ["The selected id is invalid."],
              "media_files": ["The media file must be a valid file."]
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
            "error": true,
            "message": "An error occurred during file upload: [error details]"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer b5kavd6e6D438Ec1VgaZPhf'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/tasks/get-media/{id}'
    metadata:
      groupName: 'Task Media'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get Task media files.'
      description: 'This endpoint retrieves all media files associated with a specific project, including sorting and search capabilities.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Accept: application/json
      workspace_id: 1
    urlParameters:
      id:
        name: id
        description: 'The ID of the project whose media files are to be retrieved.'
        required: true
        example: 5
        type: integer
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanUrlParameters:
      id: 5
    queryParameters:
      search:
        name: search
        description: 'optional A search query to filter media files by name, ID, or upload date.'
        required: false
        example: quis
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
      sort:
        name: sort
        description: 'optional The column to sort by (default: "id").'
        required: false
        example: omnis
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
      order:
        name: order
        description: 'optional The sorting order: "ASC" or "DESC" (default: "DESC").'
        required: false
        example: recusandae
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanQueryParameters:
      search: quis
      sort: omnis
      order: recusandae
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "error": false,
            "message": "Media files retrieved successfully.",
            "rows": [
              {
                "id": 101,
                "file": "<a href='https://example.com/storage/task-media/image.jpg' data-lightbox='task-media'><img src='https://example.com/storage/project-media/image.jpg' alt='image.jpg' width='50'></a>",
                "file_name": "image.jpg",
                "file_size": "2 MB",
                "created_at": "2025-03-03",
                "updated_at": "2025-03-03",

              }
            ],
            "total": 1
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
            "error": true,
            "message": "Task not found."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
            "error": true,
            "message": "Could not retrieve media files."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6P5bDZVE643cgvah8akf1de'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/tasks/delete-media/{id}'
    metadata:
      groupName: 'Task Media'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete a media file.'
      description: 'This endpoint allows authenticated users to delete a specific media file associated with a task.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Accept: application/json
      workspace_id: 1
    urlParameters:
      id:
        name: id
        description: 'The ID of the delete medium.'
        required: true
        example: id
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
      mediaId:
        name: mediaId
        description: 'The ID of the media file to delete.'
        required: true
        example: 4
        type: integer
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanUrlParameters:
      id: id
      mediaId: 4
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "error": false,
            "message": "File deleted successfully.",
            "id": 301,
            "title": "document.pdf",
            "parent_id": 15,
            "type": "media",
            "parent_type": "task"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
            "error": true,
            "message": "File not found."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
            "error": true,
            "message": "An error occurred while deleting the file."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer f3ah8kd4Z6v15cgbD6VPeaE'
    controller: null
    method: null
    route: null
    custom: []
